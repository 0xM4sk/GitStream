AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Cognito User Pool infrastructure for GitStream user authentication'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name for resource naming
  
  CustomDomain:
    Type: String
    Description: Custom domain for Cognito hosted UI (e.g., auth.gitstream.com)
  
  CertificateArn:
    Type: String
    Description: ARN of SSL certificate from AWS Certificate Manager
  
  GoogleClientId:
    Type: String
    Description: Google OAuth Client ID
    NoEcho: true
  
  GoogleClientSecret:
    Type: String
    Description: Google OAuth Client Secret
    NoEcho: true
  
  MicrosoftClientId:
    Type: String
    Description: Microsoft OAuth Client ID
    NoEcho: true
    Default: ""
  
  MicrosoftClientSecret:
    Type: String
    Description: Microsoft OAuth Client Secret
    NoEcho: true
    Default: ""
  
  LinkedInClientId:
    Type: String
    Description: LinkedIn OAuth Client ID
    NoEcho: true
    Default: ""
  
  LinkedInClientSecret:
    Type: String
    Description: LinkedIn OAuth Client Secret
    NoEcho: true
    Default: ""
  
  CallbackUrls:
    Type: CommaDelimitedList
    Description: Comma-delimited list of callback URLs
    Default: "http://localhost:3000/auth/callback"
  
  LogoutUrls:
    Type: CommaDelimitedList
    Description: Comma-delimited list of logout URLs
    Default: "http://localhost:3000/auth/logout"
  
  SESEmailAddress:
    Type: String
    Description: SES verified email address for sending emails
    Default: "noreply@gitstream.com"
  
  SESSourceArn:
    Type: String
    Description: ARN of SES identity for sending emails (optional)
    Default: ""

Conditions:
  HasSESSourceArn: !Not [!Equals [!Ref SESSourceArn, ""]]
  HasMicrosoftCredentials: !Not [!Equals [!Ref MicrosoftClientId, ""]]
  HasLinkedInCredentials: !Not [!Equals [!Ref LinkedInClientId, ""]]

Resources:
  # Cognito User Pool
  GitStreamUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub 'gitstream-user-pool-${Environment}'
      AliasAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 12
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          TemporaryPasswordValidityDays: 7
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
          - Name: verified_phone_number
            Priority: 2
      UsernameAttributes:
        - email
      DeviceConfiguration:
        ChallengeRequiredOnNewDevice: true
        DeviceOnlyRememberedOnUserPrompt: false
      MfaConfiguration: OPTIONAL
      EnabledMfas:
        - SMS_MFA
      SmsConfiguration:
        SnsCallerArn: !GetAtt CognitoSMSRole.Arn
        ExternalId: !Sub 'gitstream-external-${Environment}'
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true
          Mutable: true
        - AttributeDataType: String
          Name: given_name
          Required: true
          Mutable: true
        - AttributeDataType: String
          Name: family_name
          Required: true
          Mutable: true
        - AttributeDataType: String
          Name: oauth_provider
          Mutable: true
          DeveloperOnlyAttribute: false
        - AttributeDataType: String
          Name: last_login_provider
          Mutable: true
          DeveloperOnlyAttribute: false
      UserPoolTags:
        Environment: !Ref Environment
        Project: GitStream
        Component: Authentication
      EmailConfiguration:
        EmailSendingAccount: DEVELOPER
        SourceArn: !If [HasSESSourceArn, !Ref SESSourceArn, !Ref "AWS::NoValue"]
        From: !Ref SESEmailAddress
        ReplyToEmailAddress: !Sub "support@${SESEmailAddress}"
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_LINK
        EmailSubject: 'Verify your GitStream account'
        EmailMessage: !Sub |
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Verify your GitStream account</title>
          </head>
          <body style="font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;">
            <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; text-align: center; border-radius: 10px 10px 0 0;">
              <h1 style="color: white; margin: 0; font-size: 28px;">Welcome to GitStream!</h1>
            </div>
            <div style="background: #f8f9fa; padding: 30px; border-radius: 0 0 10px 10px; border: 1px solid #e9ecef;">
              <h2 style="color: #495057; margin-top: 0;">Verify your email address</h2>
              <p style="font-size: 16px; margin-bottom: 25px;">Thanks for signing up! Please click the button below to verify your email address and complete your account setup.</p>
              <div style="text-align: center; margin: 30px 0;">
                {##Verify Email##}
              </div>
              <p style="font-size: 14px; color: #6c757d; margin-top: 25px;">If you didn't create this account, you can safely ignore this email.</p>
              <hr style="border: none; border-top: 1px solid #dee2e6; margin: 25px 0;">
              <p style="font-size: 12px; color: #868e96; text-align: center;">GitStream Authentication Service</p>
            </div>
          </body>
          </html>
        EmailSubjectByLink: 'Verify your GitStream account'
        EmailMessageByLink: !Sub |
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Verify your GitStream account</title>
          </head>
          <body style="font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;">
            <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; text-align: center; border-radius: 10px 10px 0 0;">
              <h1 style="color: white; margin: 0; font-size: 28px;">Welcome to GitStream!</h1>
            </div>
            <div style="background: #f8f9fa; padding: 30px; border-radius: 0 0 10px 10px; border: 1px solid #e9ecef;">
              <h2 style="color: #495057; margin-top: 0;">Verify your email address</h2>
              <p style="font-size: 16px; margin-bottom: 25px;">Thanks for signing up! Please click the link below to verify your email address and complete your account setup.</p>
              <div style="text-align: center; margin: 30px 0;">
                <a href="{##Click Here##}" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; font-weight: bold; display: inline-block;">Verify Email Address</a>
              </div>
              <p style="font-size: 14px; color: #6c757d; margin-top: 25px;">If the button doesn't work, copy and paste this link into your browser:</p>
              <p style="font-size: 12px; color: #007bff; word-break: break-all;">{##Click Here##}</p>
              <p style="font-size: 14px; color: #6c757d; margin-top: 25px;">If you didn't create this account, you can safely ignore this email.</p>
              <hr style="border: none; border-top: 1px solid #dee2e6; margin: 25px 0;">
              <p style="font-size: 12px; color: #868e96; text-align: center;">GitStream Authentication Service</p>
            </div>
          </body>
          </html>
      UserPoolAddOns:
        AdvancedSecurityMode: ENFORCED
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        TemporaryPasswordValidityDays: 7
        InviteMessageTemplate:
          EmailSubject: 'Your GitStream account has been created'
          EmailMessage: !Sub |
            <!DOCTYPE html>
            <html>
            <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Your GitStream account has been created</title>
            </head>
            <body style="font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;">
              <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; text-align: center; border-radius: 10px 10px 0 0;">
                <h1 style="color: white; margin: 0; font-size: 28px;">Welcome to GitStream!</h1>
              </div>
              <div style="background: #f8f9fa; padding: 30px; border-radius: 0 0 10px 10px; border: 1px solid #e9ecef;">
                <h2 style="color: #495057; margin-top: 0;">Your account has been created</h2>
                <p style="font-size: 16px; margin-bottom: 25px;">An administrator has created a GitStream account for you. Please use the credentials below to sign in and set your permanent password.</p>
                <div style="background: #fff; border: 1px solid #dee2e6; border-radius: 5px; padding: 20px; margin: 20px 0;">
                  <p style="margin: 5px 0;"><strong>Username:</strong> {username}</p>
                  <p style="margin: 5px 0;"><strong>Temporary Password:</strong> <code style="background: #f8f9fa; padding: 2px 5px; border-radius: 3px;">{####}</code></p>
                </div>
                <p style="font-size: 14px; color: #dc3545; margin: 20px 0;"><strong>Important:</strong> This temporary password will expire in 7 days. Please sign in and change it as soon as possible.</p>
                <div style="text-align: center; margin: 30px 0;">
                  <a href="https://${CustomDomain}/login" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; font-weight: bold; display: inline-block;">Sign In to GitStream</a>
                </div>
                <hr style="border: none; border-top: 1px solid #dee2e6; margin: 25px 0;">
                <p style="font-size: 12px; color: #868e96; text-align: center;">GitStream Authentication Service</p>
              </div>
            </body>
            </html>

  # IAM Role for SMS MFA
  CognitoSMSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'GitStreamCognitoSMSRole-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cognito-idp.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CognitoSMSPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: '*'

  # Cognito User Pool Client
  GitStreamUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub 'gitstream-web-client-${Environment}'
      UserPoolId: !Ref GitStreamUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      SupportedIdentityProviders:
        - COGNITO
        - Google
        - Microsoft
        - LinkedIn
      CallbackURLs: !Ref CallbackUrls
      LogoutURLs: !Ref LogoutUrls
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - openid
        - email
        - profile
      AllowedOAuthFlowsUserPoolClient: true
      PreventUserExistenceErrors: ENABLED
      TokenValidityUnits:
        IdToken: hours
        AccessToken: hours
        RefreshToken: days
      IdTokenValidity: 1
      AccessTokenValidity: 1
      RefreshTokenValidity: 30
      RefreshTokenValidityUnits: days

  # Google OAuth Identity Provider
  GoogleIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      UserPoolId: !Ref GitStreamUserPool
      ProviderName: Google
      ProviderType: Google
      ProviderDetails:
        client_id: !Ref GoogleClientId
        client_secret: !Ref GoogleClientSecret
        authorize_scopes: 'openid email profile'
      AttributeMapping:
        email: email
        given_name: given_name
        family_name: family_name
        picture: picture
        username: sub

  # Microsoft OAuth Identity Provider
  MicrosoftIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Condition: HasMicrosoftCredentials
    Properties:
      UserPoolId: !Ref GitStreamUserPool
      ProviderName: Microsoft
      ProviderType: OIDC
      ProviderDetails:
        client_id: !Ref MicrosoftClientId
        client_secret: !Ref MicrosoftClientSecret
        authorize_scopes: 'openid email profile'
        oidc_issuer: 'https://login.microsoftonline.com/common/v2.0'
        attributes_request_method: GET
      AttributeMapping:
        email: email
        given_name: given_name
        family_name: family_name
        username: sub

  # LinkedIn OAuth Identity Provider
  LinkedInIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Condition: HasLinkedInCredentials
    Properties:
      UserPoolId: !Ref GitStreamUserPool
      ProviderName: LinkedIn
      ProviderType: OIDC
      ProviderDetails:
        client_id: !Ref LinkedInClientId
        client_secret: !Ref LinkedInClientSecret
        authorize_scopes: 'r_liteprofile r_emailaddress'
        oidc_issuer: 'https://www.linkedin.com/oauth'
        attributes_request_method: GET
      AttributeMapping:
        email: email
        given_name: given_name
        family_name: family_name
        username: sub

  # Custom Domain for Cognito
  CognitoDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref GitStreamUserPool
      Domain: !Ref CustomDomain
      CustomDomainConfig:
        CertificateArn: !Ref CertificateArn

  # CloudWatch Log Groups
  AuthEventsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/cognito/gitstream-user-pool-${Environment}/auth-events'
      RetentionInDays: 14

  OAuthEventsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/cognito/gitstream-user-pool-${Environment}/oauth-events'
      RetentionInDays: 14

  SecurityEventsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/cognito/gitstream-user-pool-${Environment}/security-events'
      RetentionInDays: 30

  # CloudWatch Alarms
  FailedLoginAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'GitStream-HighFailedLoginRate-${Environment}'
      AlarmDescription: 'High rate of failed login attempts'
      MetricName: SignInFailures
      Namespace: 'AWS/Cognito'
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: UserPoolId
          Value: !Ref GitStreamUserPool
      TreatMissingData: notBreaching

  # Lambda function for advanced logging (optional enhancement)
  CognitoLoggingFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'gitstream-cognito-logger-${Environment}'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt CognitoLoggingRole.Arn
      Environment:
        Variables:
          LOG_GROUP_AUTH: !Ref AuthEventsLogGroup
          LOG_GROUP_OAUTH: !Ref OAuthEventsLogGroup
          LOG_GROUP_SECURITY: !Ref SecurityEventsLogGroup
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from datetime import datetime

          logs_client = boto3.client('logs')

          def lambda_handler(event, context):
              """Log Cognito events to CloudWatch with enhanced details"""
              try:
                  log_group = determine_log_group(event)
                  log_stream = datetime.now().strftime('%Y/%m/%d')
                  
                  # Create log stream if it doesn't exist
                  try:
                      logs_client.create_log_stream(
                          logGroupName=log_group,
                          logStreamName=log_stream
                      )
                  except logs_client.exceptions.ResourceAlreadyExistsException:
                      pass
                  
                  # Format and send log message
                  message = format_log_message(event)
                  logs_client.put_log_events(
                      logGroupName=log_group,
                      logStreamName=log_stream,
                      logEvents=[{
                          'timestamp': int(datetime.now().timestamp() * 1000),
                          'message': json.dumps(message)
                      }]
                  )
                  
                  return {'statusCode': 200}
              except Exception as e:
                  print(f"Error logging event: {str(e)}")
                  return {'statusCode': 500}

          def determine_log_group(event):
              """Determine which log group to use based on event type"""
              event_type = event.get('triggerSource', '')
              if 'SignIn' in event_type or 'SignUp' in event_type:
                  return os.environ['LOG_GROUP_AUTH']
              elif 'OAuth' in event_type or 'ExternalProvider' in event_type:
                  return os.environ['LOG_GROUP_OAUTH']
              else:
                  return os.environ['LOG_GROUP_SECURITY']

          def format_log_message(event):
              """Format the event for logging"""
              return {
                  'timestamp': datetime.now().isoformat(),
                  'eventType': event.get('triggerSource'),
                  'userId': event.get('userName'),
                  'userPoolId': event.get('userPoolId'),
                  'clientId': event.get('callerContext', {}).get('clientId'),
                  'sourceIp': event.get('request', {}).get('userContextData', {}).get('ipAddress'),
                  'userAgent': event.get('request', {}).get('userContextData', {}).get('encodedData'),
                  'region': event.get('region'),
                  'eventData': event.get('request', {})
              }

  # IAM Role for Lambda logging function
  CognitoLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'GitStreamCognitoLoggingRole-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 
                  - !Sub '${AuthEventsLogGroup}*'
                  - !Sub '${OAuthEventsLogGroup}*'
                  - !Sub '${SecurityEventsLogGroup}*'

  # Lambda Permission for Cognito to invoke the logging function
  CognitoLoggingPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CognitoLoggingFunction
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt GitStreamUserPool.Arn

Outputs:
  UserPoolId:
    Description: 'Cognito User Pool ID'
    Value: !Ref GitStreamUserPool
    Export:
      Name: !Sub '${Environment}-GitStream-UserPoolId'

  UserPoolClientId:
    Description: 'Cognito User Pool Client ID'
    Value: !Ref GitStreamUserPoolClient
    Export:
      Name: !Sub '${Environment}-GitStream-UserPoolClientId'

  UserPoolArn:
    Description: 'Cognito User Pool ARN'
    Value: !GetAtt GitStreamUserPool.Arn
    Export:
      Name: !Sub '${Environment}-GitStream-UserPoolArn'

  CognitoDomainName:
    Description: 'Custom domain for Cognito hosted UI'
    Value: !Ref CustomDomain
    Export:
      Name: !Sub '${Environment}-GitStream-CognitoDomain'

  HostedUIUrl:
    Description: 'Cognito Hosted UI URL'
    Value: !Sub 'https://${CustomDomain}/login?client_id=${GitStreamUserPoolClient}&response_type=code&scope=openid+email+profile&redirect_uri=${CallbackUrls}'
    Export:
      Name: !Sub '${Environment}-GitStream-HostedUIUrl'

  GoogleIdentityProviderId:
    Description: 'Google Identity Provider ID'
    Value: !Ref GoogleIdentityProvider
    Export:
      Name: !Sub '${Environment}-GitStream-GoogleProviderId'

  MicrosoftIdentityProviderId:
    Condition: HasMicrosoftCredentials
    Description: 'Microsoft Identity Provider ID'
    Value: !Ref MicrosoftIdentityProvider
    Export:
      Name: !Sub '${Environment}-GitStream-MicrosoftProviderId'

  LinkedInIdentityProviderId:
    Condition: HasLinkedInCredentials
    Description: 'LinkedIn Identity Provider ID'
    Value: !Ref LinkedInIdentityProvider
    Export:
      Name: !Sub '${Environment}-GitStream-LinkedInProviderId'

  AuthEventsLogGroup:
    Description: 'CloudWatch Log Group for Auth Events'
    Value: !Ref AuthEventsLogGroup
    Export:
      Name: !Sub '${Environment}-GitStream-AuthLogGroup'

  OAuthEventsLogGroup:
    Description: 'CloudWatch Log Group for OAuth Events'
    Value: !Ref OAuthEventsLogGroup
    Export:
      Name: !Sub '${Environment}-GitStream-OAuthLogGroup'

  SecurityEventsLogGroup:
    Description: 'CloudWatch Log Group for Security Events'
    Value: !Ref SecurityEventsLogGroup
    Export:
      Name: !Sub '${Environment}-GitStream-SecurityLogGroup'